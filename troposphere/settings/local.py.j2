# SECURITY WARNING: don't run with debug turned on in production!
import sys
globals().update(vars(sys.modules['troposphere.settings']))

DEBUG = {{ DEBUG }}
TEMPLATE_DEBUG = {{ DEBUG }}

SECRET_KEY="{{ SECRET_KEY }}"
SERVER_URL="{{ SERVER_URL }}"
BASE_URL= "{{ BASE_URL }}"
ALLOWED_HOSTS = [SERVER_URL.replace("https://",""), "localhost"]

API_SERVER="{{ API_SERVER }}"

API_ROOT    = API_SERVER + "/api/v1"
API_V2_ROOT = API_SERVER + "/api/v2"

SITE_TITLE= "{{ SITE_TITLE}}"
SITE_FOOTER= "{{ SITE_FOOTER }}"
{% if THEME_NAME is defined and not THEME_NAME == "default" %}
THEME_NAME="{{ THEME_NAME }}"
{% else %}
THEME_NAME="troposphere_theme"
{% endif %}

# DATABASE
DATABASES = {
    "default": {
        'NAME': '{{ DATABASE_NAME }}',
        'ENGINE': '{{ DATABASE_ENGINE }}',
        'USER': '{{ DATABASE_USER }}',
        'CONN_MAX_AGE': {{ DATABASE_CONN_MAX_AGE }},
        'PASSWORD': '{{ DATABASE_PASSWORD }}',
        'HOST': '{{ DATABASE_HOST }}',
        'PORT': {{ DATABASE_PORT }}
    },
}

# Authentication
CAS_SERVER = "{{ CAS_SERVER }}"
CAS_AUTH_PREFIX = "{{ CAS_AUTH_PREFIX }}"

OAUTH_CLIENT_KEY = "{{ OAUTH_CLIENT_KEY }}"
OAUTH_CLIENT_SECRET = "{{ OAUTH_CLIENT_SECRET }}"
OAUTH_CLIENT_CALLBACK = "{{ OAUTH_CLIENT_CALLBACK }}"

# atmosphere must include the metrics endpoint
SHOW_INSTANCE_METRICS = {{ SHOW_INSTANCE_METRICS }}
{% if BADGES_ENABLED %}

# Host for authenticating a badge request
BADGE_HOST = "{{ BADGE_HOST }}"

# Host for Badgekit API
BADGE_API_HOST = "{{ BADGE_API_HOST }}"

# Badgekit slug for the system your badges belong to
BADGE_SYSTEM_SLUG = "{{ BADGE_SYSTEM_SLUG }}"

# Readable name of your badge system
BADGE_SYSTEM_NAME = "{{ BADGE_SYSTEM_NAME }}"

# Badge secret used for badge authentication server
BADGE_SECRET = "{{ BADGE_SECRET }}"
{% endif %}

{% if DJANGO_JENKINS %}
INSTALLED_APPS += (
    'django_jenkins',
)
{% endif %}
{% if SSLSERVER %}
INSTALLED_APPS += (
    'sslserver',
)
{% endif %}

{% if USE_MOCK_AUTH %}
ALWAYS_AUTH_USER = "{{ MOCK_USER }}"
# Use MockLoginBackend first!
AUTHENTICATION_BACKENDS += (
    'iplantauth.authBackends.MockLoginBackend',
)
{% else %}
# MOCK - Uncomment these lines to allow one-user-only access. Useful for debug/development
# ALWAYS_AUTH_USER = "test_user"
# # Use MockLoginBackend first!
# AUTHENTICATION_BACKENDS += (
#     'iplantauth.authBackends.MockLoginBackend',
# )
# Configure authentication plugin
{% endif %}
from datetime import timedelta
AUTHENTICATION = {
    #GLOBAL
    "TOKEN_EXPIRY_TIME": timedelta(days={{ TOKEN_EXPIRY_TIME_DAYS }}),
    "LOGOUT_REDIRECT_URL": '{{ LOGOUT_REDIRECT_URL }}',
    #CAS
    "CAS_SERVER": '{{ CAS_SERVER }}',
    "CAS_AUTH_PREFIX": '{{ CAS_AUTH_PREFIX }}',

    #CAS+OAuth
    "OAUTH_CLIENT_KEY": '{{ OAUTH_CLIENT_KEY }}',
    "OAUTH_CLIENT_SECRET": '{{ OAUTH_CLIENT_SECRET }}',
    "OAUTH_CLIENT_CALLBACK":  SERVER_URL + '/oauth2.0/callbackAuthorize',

    #GLOBUS
    "GLOBUS_OAUTH_ID": '{{ GLOBUS_OAUTH_ID }}',
    "GLOBUS_OAUTH_SECRET": '{{ GLOBUS_OAUTH_SECRET }}',
    "GLOBUS_OAUTH_CREDENTIALS_SCOPE": '{{ GLOBUS_OAUTH_CREDENTIALS_SCOPE }}',
    "GLOBUS_OAUTH_ATMOSPHERE_SCOPE": '{{ GLOBUS_OAUTH_ATMOSPHERE_SCOPE }}',
    "GLOBUS_TOKEN_URL": '{{ GLOBUS_TOKEN_URL }}',
    "GLOBUS_TOKENINFO_URL": '{{ GLOBUS_TOKENINFO_URL }}',
    "GLOBUS_AUTH_URL": '{{ GLOBUS_AUTH_URL}}',
}

{% if USE_GATE_ONE_API %}
# Settings for utilizing API & hosting of Gate One within UI
USE_GATE_ONE_API = {{ USE_GATE_ONE_API }}
GATE_ONE_API_SECRET = "{{ GATE_ONE_API_SECRET }}"
GATE_ONE_API_KEY = "{{ GATE_ONE_API_KEY }}"
# IMPORTANT:
# if working locally, this *must* be localhost and _not_ an alias
# to localhost - even a `/etc/hosts` entry that points back to
# localhost will cause the GateOne JS to fail when routing web socket
# traffic to the instantiated terminal emulator.
#
# This could be set to the following:
#
# WEB_SH_ROUTE = "https://localhost/web_shell"
# or
# WEB_SH_URL = "{{ SERVER_URL}}/{{ WEB_SH_ROUTE }}"
WEB_SH_URL = "{{ WEB_SH_ROUTE }}"
WEB_SH_BASE_URL = "{{ WEB_SH_BASE_URL }}"
WEB_SH_JS_FILE = "{{ WEB_SH_JS_FILE }}"
{% endif %}
