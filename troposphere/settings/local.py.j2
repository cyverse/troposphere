# SECURITY WARNING: don't run with debug turned on in production!
import sys
globals().update(vars(sys.modules['troposphere.settings']))

DEBUG = {{ DEBUG }}
TEMPLATE_DEBUG = {{ DEBUG }}

SECRET_KEY="{{ SECRET_KEY }}"
SERVER_URL="{{ SERVER_URL }}"
BASE_URL= "{{ BASE_URL }}"
ALLOWED_HOSTS = [SERVER_URL.replace("https://",""), "localhost"]

API_SERVER="{{ API_SERVER }}"

API_ROOT    = API_SERVER + "/api/v1"
API_V2_ROOT = API_SERVER + "/api/v2"

WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': {{ ENABLE_WEBPACK_LOADER_CACHE }},
        'BUNDLE_DIR_NAME': 'bundles/', # must end with slash
        'STATS_FILE': os.path.join(BASE_DIR, '../', 'webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'IGNORE': ['.+\.hot-update.js', '.+\.map']
    }
}

SITE_TITLE= "{{ SITE_TITLE}}"
SITE_FOOTER= "{{ SITE_FOOTER }}"

SUPPORT_EMAIL="{{ SUPPORT_EMAIL }}"

{% if STAFF_LIST_USERNAMES is defined %}
STAFF_LIST_USERNAMES = {{ STAFF_LIST_USERNAMES }}
{% endif %}

{% if THEME_NAME is defined and not THEME_NAME == "default" %}
THEME_NAME="{{ THEME_NAME }}"
{% else %}
THEME_NAME= "troposphere_theme"
{% endif %}

ORG_NAME= "{{ ORG_NAME }}"

{% if INTERCOM_APP_ID is defined and not INTERCOM_APP_ID == "" %}
INTERCOM_APP_ID = "{{ INTERCOM_APP_ID }}"
INTERCOM_COMPANY_ID = "{{ INTERCOM_COMPANY_ID }}"
INTERCOM_COMPANY_NAME = "{{ INTERCOM_COMPANY_NAME }}"
{% endif %}

{% if SESSION_COOKIE_AGE is defined and not SESSION_COOKIE_AGE == "" %}
# expect integer; value is represented in seconds
SESSION_COOKIE_AGE = {{ SESSION_COOKIE_AGE }}
{% endif %}

WEB_DESKTOP_INCLUDE_LINK = {{ WEB_DESKTOP_INCLUDE_LINK }}

WEB_DESKTOP = {
    'signing': {
        'SECRET_KEY': '{{ WEB_DESKTOP_SIGNING_SECRET_KEY }}',
        'SALT': '{{ WEB_DESKTOP_SIGNING_SALT }}'
    },
    'fingerprint': {
        'SECRET_KEY': '{{ WEB_DESKTOP_FP_SECRET_KEY }}',
        'SALT': '{{ WEB_DESKTOP_FP_SALT }}'
    },
    'redirect': {
        'ENABLED': WEB_DESKTOP_INCLUDE_LINK,
        'PROXY_URL': '{{ WEB_DESKTOP_PROXY_URL }}',
        'COOKIE_DOMAIN': '{{ WEB_DESKTOP_PROXY_DOMAIN }}'
    }
}

# DATABASE
DATABASES = {
    "default": {
        'NAME': '{{ DATABASE_NAME }}',
        'ENGINE': '{{ DATABASE_ENGINE }}',
        'USER': '{{ DATABASE_USER }}',
        'CONN_MAX_AGE': {{ DATABASE_CONN_MAX_AGE }},
        'PASSWORD': '{{ DATABASE_PASSWORD }}',
        'HOST': '{{ DATABASE_HOST }}',
        'PORT': {{ DATABASE_PORT }}
    },
}

# Authentication
{% if AUTH_USE_OVERRIDE -%}
AUTHENTICATION_BACKENDS = (
    # MOCK - If enabled, Use MockLoginBackend first for single-user access.
    # Helpful for debug/development. Be sure to set Atmosphere to MockLoginBackend.
    {% if AUTH_ENABLE_MOCK -%}
    'iplantauth.authBackends.MockLoginBackend',
    {% else -%}
    # 'iplantauth.authBackends.MockLoginBackend',
    {% endif -%}
    #
    # AuthToken - Allows staff emulation via API
    # by using existing tokens as simple authentication.
    'iplantauth.authBackends.AuthTokenLoginBackend',
    #
    # ModelBackend - Allow traditional username/password. Helpful when using areas
    # of the application that do not work with SSO backends (Globus, OAuth)
    # Basically, this will come in handy if you are not using LDAP
    {% if AUTH_ENABLE_MODEL -%}
    'django.contrib.auth.backends.ModelBackend',
    {% else -%}
    # 'django.contrib.auth.backends.ModelBackend',
    {% endif -%}
    #
    # Single Sign On Backend - This backend should give you the ability to authenticate
    # and then authorize a user, (Usually, based on OAuth or some other token exchange)
    {% if AUTH_ENABLE_GLOBUS -%}
    # Globus OAuth
    'iplantauth.authBackends.GlobusOAuthLoginBackend',
    {% elif AUTH_ENABLE_CAS or AUTH_ENABLE_OAUTH -%}
    # CAS OAuth implementation of SSO
    'iplantauth.authBackends.OAuthLoginBackend',
    {% elif AUTH_ENABLE_MOCK -%}
    # Hello developer, you have
    # SSO Disabled but are using Mock configuration.
    # (Be sure to set Atmosphere also!)
    {% else -%}
    # WARNING:
    # _No_ Backend has been enabled for SSO access.
    # This may result in a limited set of functionality from troposphere.
    {% endif -%}
    {% if AUTH_ENABLE_LDAP -%}
    #
    # LDAP - Allow access via LDAP username/password
    'iplantauth.authBackends.LDAPLoginBackend',
    {% endif -%}
    )
{% endif -%}
#CAS
CAS_SERVER = "{{ CAS_SERVER }}"
CAS_AUTH_PREFIX = "{{ CAS_AUTH_PREFIX }}"

OAUTH_CLIENT_KEY = "{{ OAUTH_CLIENT_KEY }}"
OAUTH_CLIENT_SECRET = "{{ OAUTH_CLIENT_SECRET }}"
OAUTH_CLIENT_CALLBACK = "{{ OAUTH_CLIENT_CALLBACK }}"

# atmosphere must include the metrics endpoint
SHOW_INSTANCE_METRICS = {{ SHOW_INSTANCE_METRICS }}
{% if BADGES_ENABLED %}

# Host for authenticating a badge request
BADGE_HOST = "{{ BADGE_HOST }}"

# Host for Badgekit API
BADGE_API_HOST = "{{ BADGE_API_HOST }}"

# Badgekit slug for the system your badges belong to
BADGE_SYSTEM_SLUG = "{{ BADGE_SYSTEM_SLUG }}"

# Readable name of your badge system
BADGE_SYSTEM_NAME = "{{ BADGE_SYSTEM_NAME }}"

# Badge secret used for badge authentication server
BADGE_SECRET = "{{ BADGE_SECRET }}"
{% endif %}

{% if DJANGO_JENKINS %}
INSTALLED_APPS += (
    'django_jenkins',
)
{% endif %}
{% if SSLSERVER %}
INSTALLED_APPS += (
    'sslserver',
)
{% endif %}

{% if AUTH_ENABLE_MOCK %}
ALWAYS_AUTH_USER = "{{ MOCK_USER }}"
# Use MockLoginBackend first!
AUTHENTICATION_BACKENDS += (
    'iplantauth.authBackends.MockLoginBackend',
)
{% else %}
# MOCK - Uncomment these lines to allow one-user-only access. Useful for debug/development
# ALWAYS_AUTH_USER = "test_user"
# # Use MockLoginBackend first!
# AUTHENTICATION_BACKENDS += (
#     'iplantauth.authBackends.MockLoginBackend',
# )
# Configure authentication plugin
{% endif %}
from datetime import timedelta
AUTHENTICATION = {
    #GLOBAL
    "TOKEN_EXPIRY_TIME": timedelta(days={{ TOKEN_EXPIRY_TIME_DAYS }}),
    "LOGOUT_REDIRECT_URL": '{{ LOGOUT_REDIRECT_URL }}',
    #CAS
    "CAS_SERVER": '{{ CAS_SERVER }}',
    "CAS_AUTH_PREFIX": '{{ CAS_AUTH_PREFIX }}',

    #CAS+OAuth
    "OAUTH_CLIENT_KEY": '{{ OAUTH_CLIENT_KEY }}',
    "OAUTH_CLIENT_SECRET": '{{ OAUTH_CLIENT_SECRET }}',
    "OAUTH_CLIENT_CALLBACK":  SERVER_URL + '/oauth2.0/callbackAuthorize',

    #GLOBUS
    "GLOBUS_OAUTH_ID": '{{ GLOBUS_OAUTH_ID }}',
    "GLOBUS_OAUTH_SECRET": '{{ GLOBUS_OAUTH_SECRET }}',
    "GLOBUS_OAUTH_CREDENTIALS_SCOPE": '{{ GLOBUS_OAUTH_CREDENTIALS_SCOPE }}',
    "GLOBUS_OAUTH_ATMOSPHERE_SCOPE": '{{ GLOBUS_OAUTH_ATMOSPHERE_SCOPE }}',
    "GLOBUS_TOKEN_URL": '{{ GLOBUS_TOKEN_URL }}',
    "GLOBUS_TOKENINFO_URL": '{{ GLOBUS_TOKENINFO_URL }}',
    "GLOBUS_AUTH_URL": '{{ GLOBUS_AUTH_URL}}',
}

{% if USE_GATE_ONE_API %}
# Settings for utilizing API & hosting of Gate One within UI
USE_GATE_ONE_API = {{ USE_GATE_ONE_API }}
GATE_ONE_API_SECRET = "{{ GATE_ONE_API_SECRET }}"
GATE_ONE_API_KEY = "{{ GATE_ONE_API_KEY }}"
# IMPORTANT:
# if working locally, this *must* be localhost and _not_ an alias
# to localhost - even a `/etc/hosts` entry that points back to
# localhost will cause the GateOne JS to fail when routing web socket
# traffic to the instantiated terminal emulator.
#
# This could be set to the following:
#
# WEB_SH_ROUTE = "https://localhost/web_shell"
# or
# WEB_SH_URL = "{{ SERVER_URL}}/{{ WEB_SH_ROUTE }}"
WEB_SH_URL = "{{ WEB_SH_ROUTE }}"
WEB_SH_BASE_URL = "{{ WEB_SH_BASE_URL }}"
WEB_SH_JS_FILE = "{{ WEB_SH_JS_FILE }}"
{% endif %}
